// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TRAINER
}

enum IntegrationProvider {
  VITAL
  TERRA
  POLAR
  GOOGLEFIT
  OURA
  WHOOP
  APPLE_HEALTH
  GARMIN
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  PENDING
}

enum MetricType {
  HRV
  RHR
  SLEEP
  STEPS
  HYDRATION
  MOOD
  STRESS
  SORENESS
  RPE
  TEMP
  PRESSURE
  WEIGHT
  BODY_FAT
  SLEEP_QUALITY
  SLEEP_REGULARITY
}

enum SubscriptionPlan {
  FREE_FINDER
  MONTHLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

enum ReminderKind {
  MORNING
  DAY
  EVENING
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  integrations  Integration[]
  metrics       Metric[]
  workouts      Workout[]
  reminders     Reminder[]
  trainer       Trainer?
  subscription  Subscription?
  notifications Notification[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  age       Int?
  sex       String?
  heightCm  Float?
  weightKg  Float?
  ethnicity String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Integration {
  id           String              @id @default(cuid())
  userId       String
  provider     IntegrationProvider
  status       IntegrationStatus   @default(PENDING)
  accessToken  String?             @db.Text
  refreshToken String?             @db.Text
  expiresAt    DateTime?
  meta         Json?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}

model Metric {
  id        String     @id @default(cuid())
  userId    String
  timestamp DateTime
  type      MetricType
  value     Float
  unit      String
  meta      Json?
  createdAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([userId, type])
}

model Workout {
  id           String   @id @default(cuid())
  userId       String
  timestamp    DateTime
  activityType String
  sets         Json?
  volumeLoad   Float?
  rpe          Int?
  durationMin  Int?
  meta         Json?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model Reminder {
  id        String       @id @default(cuid())
  userId    String
  kind      ReminderKind
  schedule  String
  enabled   Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Trainer {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?  @db.Text
  pricePerSession Float?
  location        String?
  contact         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([location])
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String             @unique
  stripeCustomerId String?            @unique
  stripeSubId      String?            @unique
  plan             SubscriptionPlan   @default(FREE_FINDER)
  status           SubscriptionStatus @default(ACTIVE)
  currentPeriodEnd DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([stripeSubId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  body      String    @db.Text
  readAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}